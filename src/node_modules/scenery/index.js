var Checkerboard = require('threejs-texture-checkerboard');
var three = require('three');
var world = require('world');
var view = require('view');
var TestPlane = require('./TestPlane');

var initd = false;

var items = [];

function init() {
	if(initd) return;
	initd = true;

	var scene = world.scene;

	var snowMaterial;

	var geometry = new three.PlaneGeometry(1, 1, 1, 1);

	var material = new three.ShaderMaterial({
		color: new three.Color(Math.random() * 0.5, 0.6, 0.5),
		depthColor: new three.Color(1, 1, 1)
	});

	var loader = new three.TextureLoader();
	loader.load(
		'assets/snowman.png',

		function (texture) {
			console.log(texture)
			snowMaterial = new three.MeshBasicMaterial( {
				map: texture,
				transparent: true
			});
			makeSprites();
		},

		function ( xhr ) 
		{
	
		console.log( (xhr.loaded / xhr.total * 100) + '% loaded' );
	},
	// Function called when download errors
	function ( xhr ) {
		console.log( 'An error happened' );
	}
	);

	function makeSprites() {
		//get an array of items, itterate, place
		for(var i = 0; i < 200; i++) {
			var sprite = new three.Mesh(geometry, snowMaterial);

			//var testPlane = new TestPlane();
			sprite.position.set(Math.random() * 15000, Math.random() * 50, (1-Math.pow(Math.random(), 2)) * -1200 + 200);
			sprite.parallax = sprite.position.z / -1000;
			sprite.scale.set(Math.random() * 200 + 50, Math.random() * 40 + 15, 1);
			sprite.rotation.z = (Math.random() - 0.5) * 0.2;
			scene.add(sprite);

			items.push(sprite);
			registerTeleportee(sprite);
		}
	}
	exports.teleport = teleport;
	exports.preRender = preRender;
	delete exports.init;
}

var teleportees = [];
function teleport(distance) {
	teleportees.forEach(function(teleportee) {
		teleportee.position.x += distance * (1-teleportee.parallax);
	});
}

function registerTeleportee(object) {
	teleportees.push(object);
}

function deregisterTeleportee(object) {
	var index = teleportees.indexOf(object);
	if(index !== -1) {
		teleportees.splice(index, 1);
	}
}

function preRender() {
	var dx = view.centerDelta.x;
	var dy = view.centerDelta.y;
	items.forEach(function(item) {
		item.position.x += dx * item.parallax;
		item.position.y += dy * item.parallax;
		var antiParallax = 1 - item.parallax;
		if(item.position.x < -800){
			item.position.x += 1600;
		} else if(item.position.x > 800) {
			item.position.x -= 1600;
		}
	});
}

exports = {
	init: init
};

module.exports = exports;
