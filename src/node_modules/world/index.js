var three = require('three');
var textures = require('textures');
var tweener = require('tweener');
var physics = require('physics');

var initd = false;

var scene;

function init() {
	if(initd) return;
	initd = true;

	scene = new three.Scene();
	module.exports.scene = scene;

	delete module.exports.init;
}

function spawnDeathToll(person) {

	var family = {};
	family.children = [];
	family.pets = [];

	family.wife = Math.random() > 0.5 ? true : false;

	if (family.wife) {
		var numChild = ~~(Math.random() * 4);
		for (i = 0; i <= numChild; i++) { 
			family.children.push((Math.random() > 0.5) ? 'icon_boy2.png' : 'icon_girl.png');
		}
	}
	var numPets = ~~(Math.random() * 5);
	for (i = 0; i <= numPets; i++) { 
		if (Math.random() > 0.9) {
			family.pets.push('icon_goat.png');
		} else {
			family.pets.push((Math.random() > 0.5) ? 'icon_dog.png' : 'icon_cat.png');
		}
	}
	
	var cursor = 0;


	var meshes = [];
	var maxHeight = 0;
	function getMesh(filename, person) { 
		var mesh = textures.getSprite(filename);
		mesh.position.copy(person.mesh.position);
		mesh.position.z = person.height;
		mesh.rotation.x = Math.PI * 0.25;
		mesh.scale.multiplyScalar(0.25);
		cursor += mesh.scale.x * 0.5;
		mesh.position.x += cursor;
		mesh.position.z += mesh.scale.y* 0.5;
		cursor += mesh.scale.x * 0.5;
		scene.add(mesh);
		maxHeight = Math.max(maxHeight, mesh.scale.y);
		meshes.push(mesh);
	}
	if (family.wife) {
		getMesh('icon_wife.png', person);
	}
	family.children.forEach(function(child) {
		getMesh(child, person);
	});
	family.pets.forEach(function(pet) {
		getMesh(pet, person);
	});

	meshes.forEach(function(mesh, i) {
		mesh.position.x -= cursor * 0.5;
		tweener.to(
			mesh.position, 
			2,
			{
				z: mesh.position.z + 200,
				delay: i * 0.2,
				onComplete: function() {
					mesh.parent.remove(mesh);
				}
			}
		);
	});
}

function targetSpriteAt(position) {
	var mesh = textures.getSprite('target.png');
	mesh.position.x = position.x * physics.SCALE_INV;
	mesh.position.y = position.y * physics.SCALE_INV;
	mesh.scale.multiplyScalar(0.3);
	scene.add(mesh);
	tweener.to(mesh.scale, 0.5, {
		x: mesh.scale.x + 50,
		y: mesh.scale.y + 50,
		onComplete: function() {
			mesh.parent.remove(mesh);
		}
	});
}

module.exports = {
	init: init,
	death:spawnDeathToll,
	targetSpriteAt: targetSpriteAt
};