function threejsSafety() {
	var OldObject3D = THREE.Object3D;

	var vectorsToProtectFromNaN = [
		'position',
		'scale'
	];

	var axes = [
		'x',
		'y',
		'z',
	];

	function SafeObject3D() {
		OldObject3D.call(this);
		var _this = this;
		vectorsToProtectFromNaN.forEach(function(vectorName) {
			var vector = _this[vectorName];
			axes.forEach(function(axisName){
				vector['__' + axisName] = vector[axisName];
				Object.defineProperty(vector, axisName, {
					get: function() {
						return this['__' + axisName];
					},
					set: function(value) {
						if(isNaN(value)) {
							throw new Error('Invalid value will result in a bad matrix! And you do NOT want THAT.');
						}
						this['__' + axisName] = value;
					}
				})
			});
		});
		//rotation is a bit different

		var oldRotationOnChange = this.rotation.onChangeCallback;
		var rotation = this.rotation;
		rotation.onChange(function() {
			if(isNaN(rotation.x) || isNaN(rotation.y) || isNaN(rotation.z)) {
				throw new Error('Invalid value will result in a bad matrix! And you do NOT want THAT.');
			}
			oldRotationOnChange();
		})
		// console.log('Object3D safe mode!');
	}




	SafeObject3D.prototype = OldObject3D.prototype;

	Object.keys(OldObject3D).forEach(function(key) {
		SafeObject3D[key] = OldObject3D[key];
		console.log('Object3D safe mode TRANSPOSING', key);
	})

	THREE.Object3D = SafeObject3D;
}

module.exports = threejsSafety;
