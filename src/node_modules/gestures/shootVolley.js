var three = require('three');
var world = require('world');
var physics = require('physics');
var view = require('view');
var createPlaneGeometry = require('geometry/create-plane');

var meshes = [];
for (var i = 0; i < 20; i++) {
	meshes[i] = null;
};
var identifierGroups = [];
var shootGesture = {
	touches: 2,
	name: 'shootVolley',
	identifierGroups: identifierGroups,

	onStart: onStart,
	onMove: onMove,
	onEnd: onEnd,
	updateCameraOffset: updateCameraOffset
}


var cameraLeft = 0;
var cameraBottom = 0;

function updateCameraOffset(left, bottom) {
	cameraLeft = left;
	cameraBottom = bottom;
	updateMeshes();
}

function updateMeshes() {
	identifierGroups.forEach(function(identifiers) {
		identifiers.forEach(function(id) {
			updateMesh(meshes[id]);
		});
	});
}

function updateMesh(mesh) {
	mesh.position.set(cameraLeft + mesh.x, cameraBottom + mesh.y, 0);
	var deltaX = mesh.x2-mesh.x;
	var deltaY = mesh.y2-mesh.y;
	mesh.scale.x = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
	mesh.rotation.z = Math.atan2(deltaY, deltaX);
}

function updatePosition(id, x, y, x2, y2) {
	var mesh = meshes[id];
	mesh.x = x;
	mesh.y = y;
	mesh.x2 = x2;
	mesh.y2 = y2;
	updateMesh(mesh);
}

var material;
function getMaterial() {
	if(!material) material = new three.MeshBasicMaterial({
		color: 0xffffff,
		transparent: true,
		opacity: 0.5,
		depthTest: false
	});
	return material;
}

var geometry;
function getGeometry() {
	if(!geometry) geometry = createPlaneGeometry(0, 0.5);
	return geometry;
}

function onStart(touches) {
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	var x2 = touches[1].clientX;
	var y2 = view.height - touches[1].clientY;
	var id = touches[0].identifier;
	var id2 = touches[1].identifier;
	if(!meshes[id]) {
		meshes[id] = new three.Mesh(getGeometry(), getMaterial());
		meshes[id].renderOrder = 1000;
		meshes[id].scale.set(100, 100, 1);
		meshes[id2] = meshes[id];
	}
	if(!meshes[id].parent) {
		world.scene.add(meshes[id]);
	}
	updatePosition(id, x, y, x2, y2);
}

function onMove(touches) {
	var id = touches[0].identifier;
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	var x2 = touches[1].clientX;
	var y2 = view.height - touches[1].clientY;
	updatePosition(id, x, y, x2, y2);
}

function onEnd(touches) {
	var id = touches[0].identifier;
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	var x2 = touches[1].clientX;
	var y2 = view.height - touches[1].clientY;
	updatePosition(id, x, y, x2, y2);
	if(meshes[id].parent) {
		world.scene.remove(meshes[id]);
	}
}
module.exports = shootGesture;