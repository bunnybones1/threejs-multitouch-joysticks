var three = require('three');
var world = require('world');
var physics = require('physics');
var view = require('view');

var balls = [];
for (var i = 0; i < 20; i++) {
	balls[i] = null;
};
var avatar;
var shootGesture = {
	touches: 1,
	name: 'shoot',
	identifierGroups: [],

	onStart: onStart,
	onMove: onMove,
	onEnd: onEnd,
}

var geometry;
function getGeometry() {
	if(!geometry) geometry = new three.SphereGeometry(50, 32, 16);
	return geometry;
}
function updatePosition(id, x, y) {
	balls[id].position.set(view.camera.left + x, view.camera.bottom + y, 0);
}

var material;
function getMaterial() {
	if(!material) material = new three.MeshBasicMaterial({
		color: 0xffffff,
		transparent: true,
		opacity: 0.5
	});
	return material;
}

function onStart(touches) {
	avatar = physics.getAvatar();
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	var id = touches[0].identifier;
	if(!balls[id]) {
		balls[id] = new three.Mesh(getGeometry(), getMaterial());
	}
	if(!balls[id].parent) {
		world.scene.add(balls[id]);
	}
	updatePosition(id, x, y);
}

function onMove(touches) {
	var id = touches[0].identifier;
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	updatePosition(id, x, y);
}

function onEnd(touches) {
	var id = touches[0].identifier;
	var x = touches[0].clientX;
	var y = view.height - touches[0].clientY;
	updatePosition(id, x, y);
	if(balls[id].parent) {
		world.scene.remove(balls[id]);
	}
}

module.exports = shootGesture;