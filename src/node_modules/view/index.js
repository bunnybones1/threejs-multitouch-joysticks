var resize = require('input-resize');
var three = require('three');
var screenfull = require('screenfull');
var EventUtil = require('browser-event-adder');
var world = require('world');
THREE = three;

function noop() {};
var initd = false;

var renderer;
var camera;
var cameraX = 0;
var cameraY = 0;
var width = 100;
var height = 100;


var testPlane;
var preRender = noop;

function onResize(w, h) {
	renderer.setSize(w, h);
	exports.width = width = w;
	exports.height = height = h;
	updateCamera();
}

function rafTick() {
	window.requestAnimationFrame(rafTick);
	preRender();
	renderer.render(world.scene, camera);

}

function setPreRender(callback) {
	preRender = callback;
}

function setCameraCenter(x, y, size) {
	cameraX = x;
	cameraY = y;
	cameraSize = size;
	updateCamera();
}

function init() {
	if(initd) return;
	initd = true;
	var canvas = require('canvas');

	renderer = new three.WebGLRenderer({
		canvas: canvas.canvas
	});

	var pixelRatio = window.devicePixelRatio;
	// var pixelRatio = 0.5;
	renderer.setPixelRatio(pixelRatio);

	exports.pixelRatio = pixelRatio;

	camera = new three.OrthographicCamera(0, 100, 100, 0, -1000, 1000);
	world.scene.add(camera);
	resize.onResize.add(onResize);
	resize.bump(onResize);

	renderer.render(world.scene, camera);

	window.requestAnimationFrame(rafTick);

	EventUtil.addEvent(canvas.canvas, 'touchend', requestFullscreen);

	delete exports.init;
	exports.setPreRender = setPreRender;
	exports.camera = camera;
	exports.setCameraCenter = setCameraCenter;
	exports.requestFullscreen = requestFullscreen;
	exports.registerCameraOffsetCallback = registerCameraOffsetCallback;
}

var registeredCameraOffsetCallbacks = [];
function registerCameraOffsetCallback(callback) {
	if(!callback) throw Error('You need to provide a function that accepts (left, bottom)');
	registeredCameraOffsetCallbacks.push(callback);
}

function updateCamera() {
	camera.left = width * -0.5 + cameraX;
	camera.right = width * 0.5 + cameraX;
	camera.top = height * 0.5 + cameraY;
	camera.bottom = height * -0.5 + cameraY;
	camera.updateProjectionMatrix();
	var left = camera.left;
	var bottom = camera.bottom;
	registeredCameraOffsetCallbacks.forEach(function(callback) {
		callback(left, bottom);
	});
}

function requestFullscreen() {
	return;
	if (screenfull.enabled) {
		screenfull.request();
	}
}

var exports = {
	init: init
};

module.exports = exports;