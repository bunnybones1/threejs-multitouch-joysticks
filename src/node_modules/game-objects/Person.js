var defaults = require('lodash.defaults');
var physics = require('physics');
var world = require('world');
var three = require('three');
var clamp = require('clamp');

var defaultActorParams = {
	name: 'person',
	shape: 'circle',
	radius: 25,
	mass: 1,
	friction: 0,
	x: 300,
	y: 200,
	categoryBits: 2,
	maskBits: 1 | 2 | 4,
	fixedRotation: true,
	linearDamping: 10,
	interval: 2000,
	
};


function Person(params) {
	params = params || {};
	this.walkForce = new physics.Box2D.b2Vec2(0.075, 0);
	defaults(params, defaultActorParams);
	var mesh = new THREE.Mesh(this.getGeometry(params.radius));
	this.mesh = mesh;
	params.mesh = mesh;
	this.body = physics.addActor(params);
	physics.addPerson(this);
	this.fixture = this.body.GetFixtureList();
	setInterval(this.getCoordinates.bind(this), params.interval)
	this.desiredLocation = new physics.Box2D.b2Vec2(0,0);
	this.maxSpeed = 0.06;
	
	//stats
	this.health = 5;
	this.strength = 2;
	
	//Energy vars
	this.energy = 0;
	this.isEnergized = false;
	this.boost = 0;
}


var geometry;
Person.prototype.getGeometry = function (radius) {
	if (!geometry){
		geometry = new THREE.SphereGeometry(radius, 16, 8)
	}
	return  geometry
}


Person.prototype.applyDamage = function(value) { 
	if (this.health - value <= 0 ) { 
		this.death();
	}else{
		this.health -= value;
		console.log("Health:", this.health);
	}
}

Person.prototype.death = function() { 
	//stop update
	console.log('Dead!')
}

Person.prototype.getCoordinates = function()  {
	if (Math.random() > 0.5) {
		this.isEnergized = true;
		this.target = physics.getClosestEnemyBody(this.body.GetPosition(), 0.5);
		if (!this.target) {
			this.desiredLocation.x = (Math.random() * 10) - 5;
			this.desiredLocation.y = (Math.random() * 1) + 0.2;
		}
	}
}

Person.prototype.updateWalk = function() {
	this.energy++;

	if (this.isEnergized && this.energy >= 10) {
		console.log("Energized!") 
		this.energy -= 10;
		this.boost = 0.02;
	}else {
		this.isEnergized = false;
		this.boost = 0; 
	}

	var walkTo;
	if(this.target){
		walkTo = this.target.GetPosition();
	}else {
		walkTo = this.desiredLocation;
	}

	var currLocation = this.body.GetPosition();
	this.walkForce.x = clamp(walkTo.x - currLocation.x, -this.maxSpeed, this.maxSpeed + this.boost);
	this.walkForce.y = clamp(walkTo.y - currLocation.y, -this.maxSpeed, this.maxSpeed + this.boost);	
	this.body.ApplyForce(this.walkForce, this.body.GetPosition());
	}

// Person.prototype.walk = function(value) {
// 	this.walkForce.x = (value * physics.SCALE);
// };

module.exports = Person;