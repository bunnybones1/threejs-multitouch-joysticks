var defaults = require('lodash.defaults');
var physics = require('physics');
var world = require('world');
var three = require('three');
var clamp = require('clamp');
var bits = require('physics/bits');
var Actor = require('./Actor');
var colors = require('colors');

var defaultActorParams = {
	name: 'person',
	shape: 'circle',
	radius: 25,
	mass: 10,
	friction: 0,
	categoryBits: bits.enemy,
	maskBits: bits.environment | bits.hero | bits.enemy,
	fixedRotation: false,
	linearDamping: 10,
	interval: 2000,
	color: 0x7f7f7f
};


function Person(params) {
	params = params || {};
	defaults(params, defaultActorParams);
	Actor.call(this, params);
	physics.addPerson(this);
	this.fixture = this.body.GetFixtureList();
	setInterval(this.getCoordinates.bind(this), params.interval);
	this.desiredLocation = new physics.Box2D.b2Vec2(0,0);
	this.walkDelta = new physics.Box2D.b2Vec2(0, 0);
	this.walkForce = new physics.Box2D.b2Vec2(0, 0);
	this.maxSpeed = 0.06;
	
	//stats
	this.health = 5;
	this.strength = 2;
	
	//Energy vars
	this.energy = 0;
	this.isEnergized = false;
	this.boost = 0;

	var colorSkin = new THREE.Color(colors.getColorSkin());
	colorSkin.multiplyScalar(Math.random() * 0.8 + 0.2);
	var colorSkin2 = colorSkin.clone();
	colorSkin = colorSkin.getHex();
	var red = new THREE.Color(colors.maroon);
	colorSkin2.multiply(red);
	var colorEyes = colors.getColorEyes();
	var colorPants = colors.getColorPants();
	var h = Math.random() * 40 + 40;
	var c = 0;
	//pants
	this.addBox(65, 50, 1, 0, 0, 0, 0x001144, undefined, 0.3);
	this.addBox(18, 20, h, -13, 0, h*0.5, colorPants);
	this.addBox(18, 20, h, 13, 0, h*0.5, colorPants);
	c+=h;
	h = Math.random() * 10 + 10;
	this.addBox(45, 35, h, 0, 0, c+h*0.5, colorPants);
	c+=h;
	//shirt
	h = Math.random() * 20 + 35;
	this.addBox(45, 35, h, 0, 0, c+h*0.5, colors.getColorShirt());
	c+=h*0.5-5;
	var thickness = Math.random() * 5 + 10;
	var length = Math.random() * 20 + 40;
	var arm = this.addBox(thickness, length, thickness, -25, length*0.5-thickness, c+h*0.5, colorSkin, colorSkin2);
	var arm2 = this.addBox(thickness, length, thickness, 25, length*0.5-thickness, c+h*0.5, colorSkin, colorSkin2);
	c+=h*0.5+5;
	this.armHeight = arm2.position.z;

	//head
	h = Math.random() * 15 + 35;
	this.addBox(30, 30, h, 0, 0, c+h*0.5, colorSkin, colorSkin2);
	c+=h*0.5 - 5;
	//face
	this.addBox(6, 6, 16, 0, 18, c, colorSkin, colors.maroon);
	this.addBox(3, 3, 3, -10, 16.5, c+5, colorEyes);
	this.addBox(3, 3, 3, 10, 16.5, c+5, colorEyes);
	c+=h*0.5 + 5;
	//hair
	var hatBack = -5;
	var hatHeight = c;
	if(Math.random() < 0.8) {
		var colorHair = colors.getColorHair();
		var hairLengthBack = Math.pow(Math.random(), 3) * 100 + 20;
		this.addBox(35, 20, hairLengthBack, 0, -10, c-5-hairLengthBack*0.5, colorHair, colorHair);
		if(Math.random() < 0.75) {
			hatHeight += 10;
			hatBack -=5;
			this.addBox(35, 35, 15, 0, 0, c, colorHair, colorHair);
		}
	}
	//hat
	if(Math.random() < 0.15) {
		this.addBox(25, 25, 20, 0, hatBack, hatHeight, colors.getColorHat());
	}


	this.colorSkin = colorSkin;
	this.colorSkin2 = colorSkin2;
	this.arms = [arm, arm2];
	this.height = c + 20;
	// this.addBox(30, 30, 30, 0, 0, 80, colors.tan, colors.red);

}

Person.prototype = Object.create(Actor.prototype);


Person.prototype.getMesh = function(params) {
	return new THREE.Object3D();
};

var geometry;
Person.prototype.getGeometry = function (radius) {
	if (!geometry){
		geometry = new THREE.SphereGeometry(radius, 6, 4);
	}
	return geometry;
};

var material;
Person.prototype.getMaterial = function(color) {
	if(!material) {
		material = new THREE.MeshBasicMaterial({
			color: color
		});
	}
	return material;
};

Person.prototype.applyDamage = function(value) { 
	if (this.health - value <= 0 ) { 
		this.death();
	}else{
		this.health -= value;
		console.log("Health:", this.health);
	}
};

Person.prototype.death = function() { 
	//world.death(this.mesh.position);
	//console.log('Dead!');
};

Person.prototype.getCoordinates = function()  {
	if (Math.random() > 0.5) {
		this.isEnergized = true;
		this.target = physics.getClosestEnemyBody(this.body.GetPosition(), 0.5);
		if (!this.target) {
			this.desiredLocation.x = (Math.random() * 10) - 5;
			this.desiredLocation.y = (Math.random() * 1) - 0.5;
		}
	}
};

Person.prototype.updateWalk = function() {
	if(!this.isEnergized) {
		this.energy++;
		if(this.energy >= 200) {
			this.isEnergized = true;
			this.boost = 0.02;
		}
	} else {
		if(this.energy <= 0) {
			this.isEnergized = false;
			this.boost = 0;
		
		}
	}

	var walkTo;
	var acceptableDistance = 0;
	var currLocation = this.body.GetPosition();

	if(this.target){
		acceptableDistance = this.target.m_userData.fixture.m_shape.m_radius + this.body.m_userData.fixture.m_shape.m_radius + 0.04;
		walkTo = this.target.GetPosition();
		this.walkDelta.SetV(walkTo);
		this.walkDelta.Subtract(currLocation);
		if(this.walkDelta.Length() < acceptableDistance) {
			walkTo = null;
			this.targetIsCloseEnough = true;
		} else {
			this.targetIsCloseEnough = false;
		}
	} else {
		walkTo = this.desiredLocation;
	}

	var maxSpeed = this.maxSpeed + this.boost;

	if(walkTo) {
		this.walkForce.x = clamp(this.walkDelta.x, -maxSpeed, maxSpeed);
		this.walkForce.y = clamp(this.walkDelta.y, -maxSpeed, maxSpeed);
	} else {
		this.walkForce.x = 0;
		this.walkForce.y = 0;
	}
	var angle = this.body.GetAngle();
	var desiredAngle = Math.atan2(this.walkDelta.y, this.walkDelta.x);
	var angleDelta = desiredAngle - angle;
	if(angleDelta >= Math.PI) {
		angleDelta -= Math.PI * 2;
	} else if(angleDelta <= -Math.PI) {
		angleDelta += Math.PI * 2;
	}
	this.body.ApplyForce(this.walkForce, this.body.GetPosition());
	this.body.ApplyTorque(angleDelta * 0.02);
};

// Person.prototype.walk = function(value) {
// 	this.walkForce.x = (value * physics.SCALE);
// };

module.exports = Person;