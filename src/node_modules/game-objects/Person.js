var defaults = require('lodash.defaults');
var physics = require('physics');
var world = require('world');
var three = require('three');
var clamp = require('clamp');
var bits = require('physics/bits');
var Actor = require('./Actor');

var defaultActorParams = {
	name: 'person',
	shape: 'circle',
	radius: 25,
	mass: 1,
	friction: 0,
	x: 300,
	y: 200,
	categoryBits: bits.enemy,
	maskBits: bits.environment | bits.hero | bits.enemy,
	fixedRotation: false,
	linearDamping: 10,
	interval: 2000,
	color: 0x7f7f7f
};


function Person(params) {
	params = params || {};
	defaults(params, defaultActorParams);
	Actor.call(this, params);
	physics.addPerson(this);
	this.fixture = this.body.GetFixtureList();
	setInterval(this.getCoordinates.bind(this), params.interval)
	this.desiredLocation = new physics.Box2D.b2Vec2(0,0);
	this.walkForce = new physics.Box2D.b2Vec2(0.075, 0);
	this.maxSpeed = 0.06;
	
	//stats
	this.health = 5;
	this.strength = 2;
	
	//Energy vars
	this.energy = 0;
	this.isEnergized = false;
	this.boost = 0;
}

Person.prototype = Object.create(Actor.prototype);

var geometry;
Person.prototype.getGeometry = function (radius) {
	if (!geometry){
		geometry = new THREE.SphereGeometry(radius, 6, 4)
	}
	return  geometry
}

var material;
Person.prototype.getMaterial = function(color) {
	if(!material) {
		material = new THREE.MeshBasicMaterial({
			color: color
		})
	}
	return material;
}

Person.prototype.applyDamage = function(value) { 
	if (this.health - value <= 0 ) { 
		this.death();
	}else{
		this.health -= value;
		console.log("Health:", this.health);
	}
}

Person.prototype.death = function() { 
	//stop update
	console.log('Dead!')
}

Person.prototype.getCoordinates = function()  {
	if (Math.random() > 0.5) {
		this.isEnergized = true;
		this.target = physics.getClosestEnemyBody(this.body.GetPosition(), 0.5);
		if (!this.target) {
			this.desiredLocation.x = (Math.random() * 10) - 5;
			this.desiredLocation.y = (Math.random() * 1) + 0.2;
		}
	}
}

Person.prototype.updateWalk = function() {
	if(!this.isEnergized) {
		this.energy++;
		if(this.energy >= 200) {
			this.isEnergized = true;
			this.boost = 0.02;
		}
	} else {
		if(this.energy <= 0) {
			this.isEnergized = false;
			this.boost = 0;
		}
	}

	var walkTo;
	if(this.target){
		walkTo = this.target.GetPosition();
	} else {
		walkTo = this.desiredLocation;
	}

	var maxSpeed = this.maxSpeed + this.boost;

	var currLocation = this.body.GetPosition();
	this.walkForce.x = clamp(walkTo.x - currLocation.x, -maxSpeed, maxSpeed);
	this.walkForce.y = clamp(walkTo.y - currLocation.y, -maxSpeed, maxSpeed);
	var angle = this.body.GetAngle();
	var desiredAngle = Math.atan2(this.walkForce.y, this.walkForce.x);
	var angleDelta = desiredAngle - angle;
	if(angleDelta >= (Math.PI * 0.5)) angleDelta -= Math.PI * 2;
	else if(angleDelta <= (-Math.PI * 0.5)) angleDelta += Math.PI * 2;
	this.body.ApplyForce(this.walkForce, this.body.GetPosition());
	this.body.ApplyTorque(angleDelta * 0.01);
}

// Person.prototype.walk = function(value) {
// 	this.walkForce.x = (value * physics.SCALE);
// };

module.exports = Person;