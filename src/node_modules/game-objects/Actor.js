var defaults = require('lodash.defaults');
var physics = require('physics');
var world = require('world');
var three = require('three');
var clamp = require('clamp');
var bits = require('physics/bits');

var defaultActorParams = {
	name: 'actor',
	shape: 'circle',
	radius: 25,
	mass: 1,
	friction: 0,
	x: 300,
	y: 200,
	categoryBits: bits.enemy,
	maskBits: bits.environment | bits.hero | bits.enemy,
	fixedRotation: false,
	linearDamping: 10,
	angularDamping: 10,
	interval: 2000,
	color: 0x4f4f4f
};


function Actor(params) {
	params = params || {};
	defaults(params, defaultActorParams);
	if(!params.material) {
		params.material = this.getMaterial(params.color);
	}
	var mesh = new THREE.Mesh(this.getGeometry(params.radius), params.material);
	this.mesh = mesh;
	params.mesh = mesh;
	this.body = physics.createPhysicsBody(params);
	this.fixture = this.body.GetFixtureList();
}


var geometry;
Actor.prototype.getGeometry = function (radius) {
	if (!geometry){
		geometry = new THREE.SphereGeometry(radius, 6, 4)
	}
	return  geometry
}

var material;
Actor.prototype.getMaterial = function(color) {
	if(!material) {
		material = new THREE.MeshBasicMaterial({
			color: color
		})
	}
	return material;
}


var boxGeometry;
function getBoxGeometry() {
	if(!boxGeometry) {
		boxGeometry = new THREE.BoxGeometry(1, 1, 1);
	}
	return boxGeometry;
}

var boxMaterials = {};
function getBoxMaterial(color, ambientColor, opacity) {
	opacity = opacity === undefined ? 1 : opacity;
	var str = String(color)+String(ambientColor)+String(opacity);
	if(!boxMaterials[str]) {
		boxMaterials[str] = new THREE.MeshLambertMaterial({
			color: color,
			emissive: ambientColor,
			transparent: opacity < 1,
			opacity: opacity
		});
	}
	return boxMaterials[str];
}

Actor.prototype.addBox = function(w, d, h, x, y, z, color, ambientColor, opacity){
	var box = new THREE.Mesh(getBoxGeometry(), getBoxMaterial(color, ambientColor, opacity));
	this.mesh.add(box);
	box.position.set(y||0, x||0, z||0);
	box.scale.set(d||1, w||1, h||1);
}

module.exports = Actor;