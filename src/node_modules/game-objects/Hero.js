var Fighter = require('./Fighter');
var physics = require('physics');
var bits = require('physics/bits');
var defaults = require('lodash.defaults');

var defaultActorParams = {
	name: 'hero',
	shape: 'circle',
	radius: 20,
	mass: 1,
	friction: 0,
	x: 300,
	y: 200,
	categoryBits: bits.hero,
	maskBits: bits.environment | bits.hero | bits.enemy | bits.enemyWeapon,
	linearDamping: 10,
	interval: 1000,
	color: 0x22bb22,
	fistParams: {
		categoryBits: bits.heroWeapon,
		maskBits: bits.environment | bits.enemy,
	}
};

function Hero(params) {
	params = params || {};
	defaults(params, defaultActorParams);
	Fighter.call(this, params);
	var min = new THREE.Vector3(-500, -500, -500);
	this.minOffset = min.clone();
	var max = new THREE.Vector3(500, 500, 500);
	this.maxOffset = max.clone();
	this.sightBounds = new THREE.Box3(min, max);
}

Hero.prototype = Object.create(Fighter.prototype);

var geometry;
Hero.prototype.getGeometry = function (radius) {
	if (!geometry){
		geometry = new THREE.SphereGeometry(radius, 16, 8)
	}
	return  geometry
}

var material;
Hero.prototype.getMaterial = function(color) {
	if(!material) {
		material = new THREE.MeshBasicMaterial({
			color: color
		})
	}
	return material;
}

Hero.prototype.getSightBounds = function() {
	this.sightBounds.min.copy(this.mesh.position).add(this.minOffset);
	this.sightBounds.max.copy(this.mesh.position).add(this.maxOffset);
	this.sightBounds.min.y = Math.max(this.sightBounds.min.y, physics.floorBody.bodyMesh.position.y);
	this.sightBounds.max.y = Math.min(this.sightBounds.max.y, physics.ceilingBody.bodyMesh.position.y);
	return this.sightBounds;
}

// Hero.prototype.walk = function(value) {
// 	this.walkForce.x = (value * physics.SCALE);
// };

module.exports = Hero;