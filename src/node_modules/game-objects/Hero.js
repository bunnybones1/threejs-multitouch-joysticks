var defaults = require('lodash.defaults');
var physics = require('physics');
var world = require('world');
var three = require('three');
var clamp = require('clamp')

var defaultActorParams = {
	name: 'hero',
	shape: 'circle',
	radius: 25,
	mass: 1,
	friction: 0,
	x: 300,
	y: 200,
	categoryBits: 2,
	maskBits: 1 | 4,
	fixedRotation: true,
	linearDamping: 10,
	interval: 2000,
	
};


function Hero(params) {
	params = params || {};
	this.walkForce = new physics.Box2D.b2Vec2(0.075, 0);
	defaults(params, defaultActorParams);
	var mesh = new THREE.Mesh(new THREE.SphereGeometry(params.radius, 16, 8));
	this.mesh = mesh;
	params.mesh = mesh;
	this.body = physics.addActor(params);
	this.fixture = this.body.GetFixtureList();
	var min = new THREE.Vector3(-150, -150, -150);
	this.minOffset = min.clone();
	var max = new THREE.Vector3(150, 150, 150);
	this.maxOffset = max.clone();
	this.sightBounds = new THREE.Box3(min, max);
	setInterval(this.getCoordinates.bind(this), params.interval)
	this.desiredLocation = new physics.Box2D.b2Vec2(0,0);
	this.maxSpeed = 0.06;
	this.energy = 0;
	
	//Energy vars
	this.isEnergized = false;
	this.boost = 0
}

var geometry;
function getGeometry() {
	if(!geometry) {
		geometry = new three.PlaneGeometry(20, 20, 1, 1);
	}
	return geometry;
}

var material;
function getMaterial() {
	if(!material) {
		material = new three.MeshBasicMaterial({
			wireframe: true,
			color: 0xffffff
		});
	}
	return material;
}

Hero.prototype.getCoordinates = function()  {
	if (Math.random() > 0.5) {
		this.target = physics.getClosestEnemyBody(this.body.GetPosition(), 0.5);
		if (!this.target) {
			this.desiredLocation.x = (Math.random() * 10) - 5;
			this.desiredLocation.y = (Math.random() * 1) + 0.2;
		}
		
	}
}

Hero.prototype.updateWalk = function() {
	this.energy++;

	if (this.isEnergized) { 
		this.energy -= 10;
		this.boost = 0.02;
	}else { this.boost = 0; }


	var walkTo;
	if(this.target){
		walkTo = this.target.GetPosition();
	}else {
		walkTo = this.desiredLocation;
	}

	var currLocation = this.body.GetPosition();
	this.walkForce.x = clamp(walkTo.x - currLocation.x, -this.maxSpeed, this.maxSpeed + this.boost);
	this.walkForce.y = clamp(walkTo.y - currLocation.y, -this.maxSpeed, this.maxSpeed + this.boost);	
	this.body.ApplyForce(this.walkForce, this.body.GetPosition());
	}

Hero.prototype.getSightBounds = function() {
	this.sightBounds.min.copy(this.mesh.position).add(this.minOffset);
	this.sightBounds.max.copy(this.mesh.position).add(this.maxOffset);
	this.sightBounds.min.y = Math.max(this.sightBounds.min.y, physics.floorBody.bodyMesh.position.y);
	this.sightBounds.max.y = Math.min(this.sightBounds.max.y, physics.ceilingBody.bodyMesh.position.y);
	return this.sightBounds;
}

Hero.prototype.walk = function(value) {
	this.walkForce.x = (value * physics.SCALE);
};

module.exports = Hero;