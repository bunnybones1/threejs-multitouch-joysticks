var EventUtil = require('browser-event-adder');
var canvas = require('canvas');

var initd = false;

var startDurationTolerance = 100;
var identifiersStarting;
var activeHandlers;
var startTimeoutId;

var startingTouches;

function registerHandler (handler) {
	if(handler.touches === undefined
		|| handler.onStart === undefined
		|| handler.onMove === undefined
		|| handler.onEnd === undefined
		|| handler.name === undefined
	) {
		throw new Error('Missing something.');
	}
	registeredHandlers[handler.touches] = handler;
}

function touchStartHandler (event) {
	event.preventDefault();
	Array.prototype.forEach.call(event.changedTouches, function(touch){
		identifiersStarting.push(touch.identifier);
		startingTouches[touch.identifier] = touch;
		if(startTimeoutId === undefined) {
			startTimeoutId = setTimeout(startCutoffPeriod, startDurationTolerance);
		}
	});
}

function startCutoffPeriod () {
	startTimeoutId = undefined;
	console.log('gesture', identifiersStarting.length );
	var touches = startingTouches.filter(function(touch){
		if(touch && identifiersStarting.indexOf(touch.identifier) !== -1) return touch;
	});
	var handler = registeredHandlers[identifiersStarting.length];
	if(handler) {
		handler.identifiers = identifiersStarting.slice(),
		handler.onStart(touches);
		activeHandlers.push(handler);
	}
	identifiersStarting.length = 0;
}

function touchEndHandler (event) {
	event.preventDefault();
	Array.prototype.forEach.call(event.changedTouches, function(touch) {
		var index = identifiersStarting.indexOf(touch.identifier);
		if(index !== -1) identifiersStarting.splice(index, 1);
	});
	var groupToEndIndex = -1;
	activeHandlers.forEach(function(group, i){
		Array.prototype.forEach.call(event.changedTouches, function(touch) {
			index = group.identifiers.indexOf(touch.identifier);
			if(index !== -1) {
				groupToEndIndex = i;
			}
		});
	});
	if(groupToEndIndex !== -1) {
		var group = activeHandlers[groupToEndIndex];
		var implicatedChangedTouches = Array.prototype.filter.call(event.changedTouches, function(touch) {
			return group.identifiers.indexOf(touch.identifier) !== -1;
		});
		var implicatedTouches = Array.prototype.filter.call(event.touches, function(touch) {
			return group.identifiers.indexOf(touch.identifier) !== -1;
		});
		group.onEnd(implicatedTouches.concat(implicatedChangedTouches));

		activeHandlers.splice(groupToEndIndex, 1);
	}
}

function touchMoveHandler (event) {
	event.preventDefault();
	activeHandlers.forEach(function(group) {
		group.onMove(Array.prototype.filter.call(event.touches, function(touch) {
			return (group.identifiers.indexOf(touch.identifier) !== -1);
		}));
	});
}


function init() {
	if(initd) return;
	initd = true;

	identifiersStarting = [];
	activeHandlers = [];

	startingTouches = [];


	for (var i = 0; i < startingTouches.length; i++) {
		startingTouches[i] = undefined;
	};

	registeredHandlers = [];
	for (var i = 0; i < registeredHandlers.length; i++) {
		registeredHandlers[i] = null;
	};

	EventUtil.addEvent(canvas.canvas, 'touchstart', touchStartHandler);
	EventUtil.addEvent(canvas.canvas, 'touchmove', touchMoveHandler);
	EventUtil.addEvent(canvas.canvas, 'touchend', touchEndHandler);

	module.exports.registerHandler = registerHandler;
	delete module.exports.init;
}

module.exports = {
	init: init
};