var initd = false;

var view = require('view');
var world = require('world');
var Box2DModule = require('vendor/box2d-emscripten');
var Box2D = Box2DModule.Box2D;
var defaults = require('lodash.defaults');

var SCALE = 1 / 400;
var SCALE_INV = 1 / SCALE;
function init() {
	if(initd) return;
	initd = true;

	var debugMeshes = [];
	var scene = world.scene;

	var gravity = new Box2D.b2Vec2(0, -4);
	var physicsWorld = new Box2D.b2World(gravity);

	var fixDef = new Box2D.b2FixtureDef();
	var bodyDef = new Box2D.b2BodyDef();

	var filter = fixDef.get_filter();

	function addBody(bodyDef, fixDef) {
		var geometry;
		var body = physicsWorld.CreateBody(bodyDef);
		body.CreateFixture(fixDef);
		body.SetAwake(1);
		body.SetActive(1);
		if(fixDef.width && fixDef.height) {
			geometry = new THREE.PlaneGeometry(fixDef.width, fixDef.height, 1, 1);
		} else if(fixDef.radius) {
			geometry = new THREE.SphereGeometry(fixDef.radius, 8, 4);
		} else {
			throw new Error('Cannot deduce desired shape.');
		}
		var debugMesh = new THREE.Mesh(geometry);
		debugMesh.body = body;
		body.debugMesh = debugMesh;
		scene.add(debugMesh);
		debugMeshes.push(debugMesh);
		return debugMesh;
	}

	var defaultActorParams = {
		shape: 'circle',
		mass: 1.0,
		density: 1,
		friction: 0.5,
		restitution: 0.2,
		x: 100,
		y: 100,
		angle: 0,
		categoryBits: 1,
		maskBits: 1
	};

	var defaultCircleParams = {
		radius: 50
	};

	var defaultRectangleParams = {
		width: 50,
		height: 50
	};
	function addActor(params) {
		defaults(params, defaultActorParams);
		var shape;
		switch(params.shape) {
			case 'circle':
				defaults(params, defaultCircleParams);

				delete fixDef.width;
				delete fixDef.height;
				fixDef.radius = params.radius;

				shape = new Box2D.b2CircleShape();
				shape.set_m_radius(params.radius * SCALE);
				
				break;
			case 'rectangle':
				defaults(params, defaultRectangleParams);

				delete fixDef.radius;
				fixDef.width = params.width;
				fixDef.height = params.height;

				shape = new Box2D.b2PolygonShape();

				// half width, half height.
				shape.SetAsBox(params.width * 0.5 * SCALE, params.height * 0.5 * SCALE);
				fixDef.width = params.width;
				fixDef.height = params.height;

				break;
			default:
				throw new Error('unkown shape');
		}
		bodyDef.set_type(params.mass === 0 ? Box2D.b2_staticBody : Box2D.b2_dynamicBody);

		bodyDef.set_position(new Box2D.b2Vec2(params.x * SCALE, params.y * SCALE));

		fixDef.set_density(params.density);
		fixDef.set_friction(params.friction);
		fixDef.set_restitution(params.restitution);
		
		fixDef.set_shape(shape);

		filter.set_categoryBits(params.categoryBits);
		filter.set_maskBits(params.maskBits);

		var body = addBody(bodyDef, fixDef);
		body.name = params.name;
		return body;
	}

	addActor({
		name: 'ground',
		shape: 'rectangle',
		mass: 0,
		width: 600,
		height: 10,
		x: 300,
		y: 10,
		categoryBits: 1,
		maskBits: 3,
	})

	var circleParams = {
		name: 'testBall',
		shape: 'circle',
		categoryBits: 2,
		maskBits: 1
	}
	for(var i = 0; i < 25; ++i) {
		circleParams.radius = Math.random() * 30 + 10;
		circleParams.x = Math.random() * 600;
		circleParams.y = Math.random() * 300;
		addActor(circleParams);
	}

	circleParams.name = 'elephant';
	circleParams.radius = 50;
	circleParams.x = 300;
	circleParams.y = 300;
	var elephant = addActor(circleParams);
	var force = new Box2D.b2Vec2(0.1, 0);
	var pos;
	function update() {
		elephant.body.ApplyForceToCenter(force);
		pos = elephant.body.GetPosition();
		if(pos.get_x() > 900 * SCALE) {
			elephant.body.SetTransform(new Box2D.b2Vec2(100 * SCALE, 100 * SCALE), 0);
		}

		physicsWorld.Step(
			1 / 60,   //frame-rate
			2,       //velocity iterations
			2       //position iterations
		);

		debugMeshes.forEach(function(debugMesh){
			pos = debugMesh.body.GetPosition();
			debugMesh.position.x = pos.get_x() * SCALE_INV;
			debugMesh.position.y = pos.get_y() * SCALE_INV;
			debugMesh.rotation.z = debugMesh.body.GetAngle();
		})


		physicsWorld.ClearForces();
		 
		window.requestAnimationFrame(update);
	}
	window.requestAnimationFrame(update);
	delete module.exports.init;
}

module.exports = {
	init: init
};